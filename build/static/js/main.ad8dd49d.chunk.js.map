{"version":3,"sources":["img/Reveille-TAMU-Mascot.jpg","components/DetectivesRanking.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DetectiveRanking","props","state","leaderboard","axios","get","then","response","console","log","setState","data","catch","error","this","class","length","map","key","username","visitedPlaces","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4KAAAA,EAAOC,QAAU,IAA0B,kD,kJCoD5BC,E,kDAhDV,WAAYC,GACX,IAAD,8BACI,cAAMA,IACDC,MAAQ,CACTC,YAAa,IAHrB,E,gEAMoB,IAAD,OACfC,IAAMC,IAAI,uCACTC,MAAK,SAAAC,GAECC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAACP,YAAYI,EAASI,UAEzCC,OAAM,SAAAC,GACHL,QAAQC,IAAII,Q,+BAIb,IACEV,EAAeW,KAAKZ,MAApBC,YACP,OACL,6BACA,wBAAIY,MAAM,iBAAV,4DAES,yBAAKA,MAAM,mBACjB,2BAAOA,MAAM,eACd,wBAAIA,MAAM,uBACR,wBAAIA,MAAM,sBAAV,QACA,wBAAIA,MAAM,6BAAV,qBAGWZ,EAAYa,OACZb,EAAYc,KAAI,SAAAd,GAAW,OACtC,wBAAIY,MAAQ,YAAYG,IAAOf,EAAYgB,UAC1C,wBAAIJ,MAAM,kBAAkBZ,EAAYgB,UACvC,wBAAIJ,MAAM,gBAAgBZ,EAAYiB,mBAE7B,Y,GAvCcC,a,MCmBjBC,MAff,WACE,OACE,yBAAKC,UAAU,OAClB,yBAAKR,MAAM,mBAEX,yBAAKA,MAAM,8BACX,yBAAKA,MAAM,uBACJ,6BACG,wBAAIQ,UAAY,SAAhB,8BAEH,kBAAC,EAAD,QCLYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd1B,OAAM,SAAAC,GACLL,QAAQK,MAAMA,EAAM0B,c","file":"static/js/main.ad8dd49d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Reveille-TAMU-Mascot.817d08fb.jpg\";","import React, {Component} from 'react'\r\nimport axios from 'axios'\r\n\r\n class DetectiveRanking extends Component{\r\n     constructor(props)\r\n     {\r\n         super(props)\r\n         this.state = {\r\n             leaderboard: []\r\n         }\r\n     }\r\n     componentDidMount(){\r\n         axios.get('http://45.63.0.107:3000/leaderboard')\r\n         .then(response =>\r\n            {\r\n                console.log(response)\r\n                this.setState({leaderboard:response.data})\r\n            })\r\n          .catch(error =>{\r\n              console.log(error)\r\n          })\r\n         \r\n     }\r\n    render(){\r\n        const {leaderboard} = this.state\r\n        return(\r\n\t\t\t<div>\r\n\t\t\t<h2 class=\"top-detective\">Miss Reveille extends her Commendations to these Aggies!</h2>\r\n\r\n            <div class=\"all-leaderboard\">\r\n\t\t\t\t\t\t<table class=\"leaderboard\">\r\n\t\t\t  <tr class=\"leaderboard-headers\">\r\n\t\t\t    <th class=\"leaderboard-header\">Name</th>\r\n\t\t\t    <th class=\"leaderboard-header-places\">AggieSites Found</th>\r\n\t\t\t  </tr>\r\n              {\r\n                  leaderboard.length ?\r\n                  leaderboard.map(leaderboard => \r\n\t\t\t\t\t  <tr class = \"detective\" key = {leaderboard.username}>\r\n\t\t\t\t\t  \t<td class='detective-name'>{leaderboard.username}</td>\r\n\t\t\t\t\t    <td class='places-found'>{leaderboard.visitedPlaces}</td>\r\n\t\t\t\t\t  </tr>):\r\n                  null\r\n              }\r\n\t\t\t</table>\r\n            </div>\r\n\t\t\t</div>\r\n\r\n        )\r\n    }\r\n }\r\n\r\nexport default DetectiveRanking\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios'\nimport './App.css';\nimport DetectiveRanking from './components/DetectivesRanking.js';\nimport reveille\tfrom './img/Reveille-TAMU-Mascot.jpg';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\t<div class=\"top-bar-thingy\"></div>\n\n\t<div class='reveille-anti-transparent'></div>\n\t<div class='reveille-container'></div>\n        <div>\n           <h1 className = \"title\">Top Detective Leaderboard</h1>\n        </div>\n        <DetectiveRanking></DetectiveRanking>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}